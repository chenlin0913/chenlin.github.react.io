{"map":"{\"version\":3,\"sources\":[\"D:/react-router-redux-cl/src\\\\page\\\\utils\\\\api.js\"],\"names\":[\"_qs\",\"__webpack_require__\",\"axios\",\"interceptors\",\"request\",\"use\",\"config\",\"error\",\"Promise\",\"reject\",\"response\",\"resolve\",\"checkStatus\",\"status\",\"msg\",\"checkCode\",\"res\",\"console\",\"log\",\"alert\",\"post\",\"url\",\"data\",\"method\",\"baseURL\",\"qs\",\"stringify\",\"timeout\",\"headers\",\"X-Requested-With\",\"Content-Type\",\"Access-Control-Allow-Origin\",\"Access-Control-Allow-Methods\",\"Access-Control-Allow-Headers\",\"then\",\"get\",\"params\"],\"mappings\":\"yIAAA,MAAAA,EAAAC,EAAA,sEAIAC,EAAMC,aAAaC,QAAQC,IAAI,SAAAC,GAE9B,OAAOA,GACL,SAAAC,GACF,OAAOC,QAAQC,OAAOF,KAGvBL,EAAMC,aAAaO,SAASL,IAAI,SAAAK,GAC/B,OAAOA,GACL,SAAAH,GACF,OAAOC,QAAQG,QAAQJ,EAAMG,YAI9B,IAAME,EAAc,SAACF,GAGpB,OAAGA,GAAiC,MAApBA,EAASG,QAAsC,MAApBH,EAASG,QAAsC,MAApBH,EAASG,QAM9EA,QAAS,IACTC,IAAK,QANEJ,GAUHK,EAAY,SAACC,GAMlB,OAJmB,MAAhBA,EAAIH,SACNI,QAAQC,IAAI,KACZC,MAAMH,EAAIF,MAEJE,cAIPI,KADc,SACTC,EAAKC,GACT,OAAOpB,GACNqB,OAAQ,OACRC,QA3Cc,OA4CdH,IAAAA,EACAC,KAAMG,EAAAA,QAAGC,UAAUJ,GACnBK,QAAS,IACTC,SACCC,mBAAoB,iBACpBC,eAAgB,oDAChBC,8BAA8B,IAC9BC,+BAA+B,OAC/BC,+BAA+B,mCAE9BC,KACF,SAACxB,GACA,OAAOE,EAAYF,KAEnBwB,KACD,SAAClB,GACA,OAAOD,EAAUC,MAIpBmB,IAzBc,SAyBVd,EAAKe,GACR,OAAOlC,GACNqB,OAAQ,MACRC,QAnEc,OAoEdH,IAAAA,EACAe,OAAAA,EACAT,QAAS,IACTC,SACCC,mBAAoB,iBACpBC,eAAgB,mDAChBC,8BAA8B,IAC9BC,+BAA+B,MAC/BC,+BAA+B,mCAE9BC,KACF,SAACxB,GACA,OAAOE,EAAYF,KAEnBwB,KACD,SAAClB,GACA,OAAOD,EAAUC\",\"sourcesContent\":[\"import qs from 'qs';\\r\\n\\r\\nconst baseURLs = '/api';\\r\\n\\r\\naxios.interceptors.request.use(config => {\\r\\n\\t// loading\\r\\n\\treturn config\\r\\n}, error => {\\r\\n\\treturn Promise.reject(error)\\r\\n})\\r\\n\\r\\naxios.interceptors.response.use(response => {\\r\\n\\treturn response\\r\\n}, error => {\\r\\n\\treturn Promise.resolve(error.response)\\r\\n})\\r\\n\\r\\n\\r\\nconst checkStatus = (response) =>{\\r\\n\\t// loading\\r\\n\\t// 如果http状态码正常，则直接返回数据\\r\\n\\tif(response && (response.status === 200 || response.status === 304 || response.status === 400)) {\\r\\n\\t\\treturn response\\r\\n\\t\\t// 如果不需要除了data之外的数据，可以直接 return response.data\\r\\n\\t}\\r\\n\\t// 异常状态下，把错误信息返回去\\r\\n\\treturn {\\r\\n\\t\\tstatus: -404,\\r\\n\\t\\tmsg: '网络异常'\\r\\n\\t}\\r\\n}\\r\\n\\r\\nconst checkCode = (res) =>{\\r\\n\\t// 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户\\r\\n\\tif(res.status === -404) {\\r\\n\\t\\tconsole.log(404);\\r\\n\\t\\talert(res.msg)\\r\\n\\t}\\r\\n\\treturn res\\r\\n}\\r\\n\\r\\nexport default {\\r\\n\\tpost(url, data) {\\r\\n\\t\\treturn axios({\\r\\n\\t\\t\\tmethod: 'post',\\r\\n\\t\\t\\tbaseURL: baseURLs,\\r\\n\\t\\t\\turl,\\r\\n\\t\\t\\tdata: qs.stringify(data),\\r\\n\\t\\t\\ttimeout: 10000,\\r\\n\\t\\t\\theaders: {\\r\\n\\t\\t\\t\\t'X-Requested-With': 'XMLHttpRequest',\\r\\n\\t\\t\\t\\t'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8;',\\r\\n\\t\\t\\t\\t'Access-Control-Allow-Origin':'*',\\r\\n\\t\\t\\t\\t'Access-Control-Allow-Methods':'POST',\\r\\n\\t\\t\\t\\t'Access-Control-Allow-Headers':'x-requested-with,content-type'\\r\\n\\t\\t\\t}\\r\\n\\t\\t}).then(\\r\\n\\t\\t\\t(response) => {\\r\\n\\t\\t\\t\\treturn checkStatus(response)\\r\\n\\t\\t\\t}\\r\\n\\t\\t).then(\\r\\n\\t\\t\\t(res) => {\\r\\n\\t\\t\\t\\treturn checkCode(res)\\r\\n\\t\\t\\t}\\r\\n\\t\\t)\\r\\n\\t},\\r\\n\\tget(url, params) {\\r\\n\\t\\treturn axios({\\r\\n\\t\\t\\tmethod: 'get',\\r\\n\\t\\t\\tbaseURL: baseURLs,\\r\\n\\t\\t\\turl,\\r\\n\\t\\t\\tparams, // get 请求时带的参数\\r\\n\\t\\t\\ttimeout: 10000,\\r\\n\\t\\t\\theaders: {\\r\\n\\t\\t\\t\\t'X-Requested-With': 'XMLHttpRequest',\\r\\n\\t\\t\\t\\t'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\\r\\n\\t\\t\\t\\t'Access-Control-Allow-Origin':'*',\\r\\n\\t\\t\\t\\t'Access-Control-Allow-Methods':'GET',\\r\\n\\t\\t\\t\\t'Access-Control-Allow-Headers':'x-requested-with,content-type'\\r\\n\\t\\t\\t}\\r\\n\\t\\t}).then(\\r\\n\\t\\t\\t(response) => {\\r\\n\\t\\t\\t\\treturn checkStatus(response)\\r\\n\\t\\t\\t}\\r\\n\\t\\t).then(\\r\\n\\t\\t\\t(res) => {\\r\\n\\t\\t\\t\\treturn checkCode(res)\\r\\n\\t\\t\\t}\\r\\n\\t\\t)\\r\\n\\t}\\r\\n}\"]}","code":"webpackHotUpdate(6,{\"./src/page/utils/api.js\":function(e,t,n){\"use strict\";(function(e){Object.defineProperty(t,\"__esModule\",{value:!0});var s,o=n(\"./node_modules/qs/lib/index.js\"),r=(s=o)&&s.__esModule?s:{default:s};e.interceptors.request.use(function(e){return e},function(e){return Promise.reject(e)}),e.interceptors.response.use(function(e){return e},function(e){return Promise.resolve(e.response)});var u=function(e){return!e||200!==e.status&&304!==e.status&&400!==e.status?{status:-404,msg:\"网络异常\"}:e},i=function(e){return-404===e.status&&(console.log(404),alert(e.msg)),e};t.default={post:function(t,n){return e({method:\"post\",baseURL:\"/api\",url:t,data:r.default.stringify(n),timeout:1e4,headers:{\"X-Requested-With\":\"XMLHttpRequest\",\"Content-Type\":\"application/x-www-form-urlencoded; charset=UTF-8;\",\"Access-Control-Allow-Origin\":\"*\",\"Access-Control-Allow-Methods\":\"POST\",\"Access-Control-Allow-Headers\":\"x-requested-with,content-type\"}}).then(function(e){return u(e)}).then(function(e){return i(e)})},get:function(t,n){return e({method:\"get\",baseURL:\"/api\",url:t,params:n,timeout:1e4,headers:{\"X-Requested-With\":\"XMLHttpRequest\",\"Content-Type\":\"application/x-www-form-urlencoded; charset=UTF-8\",\"Access-Control-Allow-Origin\":\"*\",\"Access-Control-Allow-Methods\":\"GET\",\"Access-Control-Allow-Headers\":\"x-requested-with,content-type\"}}).then(function(e){return u(e)}).then(function(e){return i(e)})}}}).call(this,n(\"./node_modules/axios/index.js\"))}});","extractedComments":[]}